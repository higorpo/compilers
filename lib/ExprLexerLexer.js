// Generated from java-escape by ANTLR 4.11.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,30,219,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,1,0,1,0,1,0,1,
0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,
10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,15,
1,15,1,15,4,15,141,8,15,11,15,12,15,142,3,15,145,8,15,1,16,1,16,1,16,5,16,
150,8,16,10,16,12,16,153,9,16,1,17,4,17,156,8,17,11,17,12,17,157,1,18,4,
18,161,8,18,11,18,12,18,162,1,18,1,18,4,18,167,8,18,11,18,12,18,168,1,19,
1,19,5,19,173,8,19,10,19,12,19,176,9,19,1,19,1,19,1,20,4,20,181,8,20,11,
20,12,20,182,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,
196,8,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,
1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,174,0,33,1,1,3,2,5,3,7,4,
9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,0,29,0,31,0,33,14,35,
15,37,16,39,17,41,18,43,19,45,20,47,21,49,22,51,23,53,24,55,25,57,26,59,
27,61,28,63,29,65,30,1,0,7,2,0,65,90,97,122,1,0,48,57,3,0,9,10,13,13,32,
32,3,0,9,10,12,13,32,32,2,0,60,60,62,62,2,0,43,43,45,45,3,0,37,37,42,42,
47,47,229,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,
11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,
0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,
1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,
0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,
0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,1,67,1,0,0,0,3,71,1,0,0,0,5,75,1,0,0,0,7,
81,1,0,0,0,9,88,1,0,0,0,11,94,1,0,0,0,13,99,1,0,0,0,15,106,1,0,0,0,17,109,
1,0,0,0,19,113,1,0,0,0,21,118,1,0,0,0,23,124,1,0,0,0,25,128,1,0,0,0,27,133,
1,0,0,0,29,135,1,0,0,0,31,144,1,0,0,0,33,146,1,0,0,0,35,155,1,0,0,0,37,160,
1,0,0,0,39,170,1,0,0,0,41,180,1,0,0,0,43,195,1,0,0,0,45,197,1,0,0,0,47,199,
1,0,0,0,49,201,1,0,0,0,51,203,1,0,0,0,53,205,1,0,0,0,55,207,1,0,0,0,57,209,
1,0,0,0,59,211,1,0,0,0,61,213,1,0,0,0,63,215,1,0,0,0,65,217,1,0,0,0,67,68,
5,100,0,0,68,69,5,101,0,0,69,70,5,102,0,0,70,2,1,0,0,0,71,72,5,105,0,0,72,
73,5,110,0,0,73,74,5,116,0,0,74,4,1,0,0,0,75,76,5,102,0,0,76,77,5,108,0,
0,77,78,5,111,0,0,78,79,5,97,0,0,79,80,5,116,0,0,80,6,1,0,0,0,81,82,5,115,
0,0,82,83,5,116,0,0,83,84,5,114,0,0,84,85,5,105,0,0,85,86,5,110,0,0,86,87,
5,103,0,0,87,8,1,0,0,0,88,89,5,112,0,0,89,90,5,114,0,0,90,91,5,105,0,0,91,
92,5,110,0,0,92,93,5,116,0,0,93,10,1,0,0,0,94,95,5,114,0,0,95,96,5,101,0,
0,96,97,5,97,0,0,97,98,5,100,0,0,98,12,1,0,0,0,99,100,5,114,0,0,100,101,
5,101,0,0,101,102,5,116,0,0,102,103,5,117,0,0,103,104,5,114,0,0,104,105,
5,110,0,0,105,14,1,0,0,0,106,107,5,105,0,0,107,108,5,102,0,0,108,16,1,0,
0,0,109,110,5,102,0,0,110,111,5,111,0,0,111,112,5,114,0,0,112,18,1,0,0,0,
113,114,5,101,0,0,114,115,5,108,0,0,115,116,5,115,0,0,116,117,5,101,0,0,
117,20,1,0,0,0,118,119,5,98,0,0,119,120,5,114,0,0,120,121,5,101,0,0,121,
122,5,97,0,0,122,123,5,107,0,0,123,22,1,0,0,0,124,125,5,110,0,0,125,126,
5,101,0,0,126,127,5,119,0,0,127,24,1,0,0,0,128,129,5,110,0,0,129,130,5,117,
0,0,130,131,5,108,0,0,131,132,5,108,0,0,132,26,1,0,0,0,133,134,7,0,0,0,134,
28,1,0,0,0,135,136,7,1,0,0,136,30,1,0,0,0,137,145,3,27,13,0,138,145,3,29,
14,0,139,141,7,2,0,0,140,139,1,0,0,0,141,142,1,0,0,0,142,140,1,0,0,0,142,
143,1,0,0,0,143,145,1,0,0,0,144,137,1,0,0,0,144,138,1,0,0,0,144,140,1,0,
0,0,145,32,1,0,0,0,146,151,3,27,13,0,147,150,3,27,13,0,148,150,3,29,14,0,
149,147,1,0,0,0,149,148,1,0,0,0,150,153,1,0,0,0,151,149,1,0,0,0,151,152,
1,0,0,0,152,34,1,0,0,0,153,151,1,0,0,0,154,156,3,29,14,0,155,154,1,0,0,0,
156,157,1,0,0,0,157,155,1,0,0,0,157,158,1,0,0,0,158,36,1,0,0,0,159,161,3,
29,14,0,160,159,1,0,0,0,161,162,1,0,0,0,162,160,1,0,0,0,162,163,1,0,0,0,
163,164,1,0,0,0,164,166,9,0,0,0,165,167,3,29,14,0,166,165,1,0,0,0,167,168,
1,0,0,0,168,166,1,0,0,0,168,169,1,0,0,0,169,38,1,0,0,0,170,174,5,34,0,0,
171,173,9,0,0,0,172,171,1,0,0,0,173,176,1,0,0,0,174,175,1,0,0,0,174,172,
1,0,0,0,175,177,1,0,0,0,176,174,1,0,0,0,177,178,5,34,0,0,178,40,1,0,0,0,
179,181,7,3,0,0,180,179,1,0,0,0,181,182,1,0,0,0,182,180,1,0,0,0,182,183,
1,0,0,0,183,184,1,0,0,0,184,185,6,20,0,0,185,42,1,0,0,0,186,196,7,4,0,0,
187,188,5,60,0,0,188,196,5,61,0,0,189,190,5,62,0,0,190,196,5,61,0,0,191,
192,5,61,0,0,192,196,5,61,0,0,193,194,5,33,0,0,194,196,5,61,0,0,195,186,
1,0,0,0,195,187,1,0,0,0,195,189,1,0,0,0,195,191,1,0,0,0,195,193,1,0,0,0,
196,44,1,0,0,0,197,198,7,5,0,0,198,46,1,0,0,0,199,200,7,6,0,0,200,48,1,0,
0,0,201,202,5,61,0,0,202,50,1,0,0,0,203,204,5,44,0,0,204,52,1,0,0,0,205,
206,5,59,0,0,206,54,1,0,0,0,207,208,5,40,0,0,208,56,1,0,0,0,209,210,5,41,
0,0,210,58,1,0,0,0,211,212,5,123,0,0,212,60,1,0,0,0,213,214,5,125,0,0,214,
62,1,0,0,0,215,216,5,91,0,0,216,64,1,0,0,0,217,218,5,93,0,0,218,66,1,0,0,
0,11,0,142,144,149,151,157,162,168,174,182,195,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class ExprLexerLexer extends antlr4.Lexer {

    static grammarFileName = "ExprLexer.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'def'", "'int'", "'float'", "'string'", 
                         "'print'", "'read'", "'return'", "'if'", "'for'", 
                         "'else'", "'break'", "'new'", "'null'", null, null, 
                         null, null, null, null, null, null, "'='", "','", 
                         "';'", "'('", "')'", "'{'", "'}'", "'['", "']'" ];
	static symbolicNames = [ null, "FUNCTION", "INT", "FLOAT", "STRING", "PRINT", 
                          "READ", "RETURN", "IF", "FOR", "ELSE", "BREAK", 
                          "NEW", "NULL", "IDENT", "INT_CONSTANT", "FLOAT_CONSTANT", 
                          "STRING_CONSTANT", "WS", "COMPARISON_OPERATOR", 
                          "MATH_OPERATOR", "SPECIAL_MATH_OPERATOR", "ATTRIBUTION", 
                          "COMMA", "SEMICOMMA", "LPAREN", "RPAREN", "LCURLY", 
                          "RCURLY", "LSQUARE", "RSQUARE" ];
	static ruleNames = [ "FUNCTION", "INT", "FLOAT", "STRING", "PRINT", "READ", 
                      "RETURN", "IF", "FOR", "ELSE", "BREAK", "NEW", "NULL", 
                      "LETTER", "DIGIT", "CHARACTER", "IDENT", "INT_CONSTANT", 
                      "FLOAT_CONSTANT", "STRING_CONSTANT", "WS", "COMPARISON_OPERATOR", 
                      "MATH_OPERATOR", "SPECIAL_MATH_OPERATOR", "ATTRIBUTION", 
                      "COMMA", "SEMICOMMA", "LPAREN", "RPAREN", "LCURLY", 
                      "RCURLY", "LSQUARE", "RSQUARE" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    }

    get atn() {
        return atn;
    }
}

ExprLexerLexer.EOF = antlr4.Token.EOF;
ExprLexerLexer.FUNCTION = 1;
ExprLexerLexer.INT = 2;
ExprLexerLexer.FLOAT = 3;
ExprLexerLexer.STRING = 4;
ExprLexerLexer.PRINT = 5;
ExprLexerLexer.READ = 6;
ExprLexerLexer.RETURN = 7;
ExprLexerLexer.IF = 8;
ExprLexerLexer.FOR = 9;
ExprLexerLexer.ELSE = 10;
ExprLexerLexer.BREAK = 11;
ExprLexerLexer.NEW = 12;
ExprLexerLexer.NULL = 13;
ExprLexerLexer.IDENT = 14;
ExprLexerLexer.INT_CONSTANT = 15;
ExprLexerLexer.FLOAT_CONSTANT = 16;
ExprLexerLexer.STRING_CONSTANT = 17;
ExprLexerLexer.WS = 18;
ExprLexerLexer.COMPARISON_OPERATOR = 19;
ExprLexerLexer.MATH_OPERATOR = 20;
ExprLexerLexer.SPECIAL_MATH_OPERATOR = 21;
ExprLexerLexer.ATTRIBUTION = 22;
ExprLexerLexer.COMMA = 23;
ExprLexerLexer.SEMICOMMA = 24;
ExprLexerLexer.LPAREN = 25;
ExprLexerLexer.RPAREN = 26;
ExprLexerLexer.LCURLY = 27;
ExprLexerLexer.RCURLY = 28;
ExprLexerLexer.LSQUARE = 29;
ExprLexerLexer.RSQUARE = 30;



